<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Math for Machines</title>
        <link>https://mathformachines.com</link>
        <description><![CDATA[A blog about data science and machine learning, with a lot of math.]]></description>
        <atom:link href="https://mathformachines.com/feeds/python.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Wed, 30 Jan 2019 00:00:00 UT</lastBuildDate>
        <item>
    <title>Bayesian Topic Modeling</title>
    <link>https://mathformachines.com/posts/bayesian-topic-modeling/index.html</link>
    <description><![CDATA[<p>Imagine we have some collection of documents. They could be novels, or tweets, or financial reports—just any collection of text. We want an algorithm that can discover what they are about, and we would like our algorithm to do it automatically, without any hints. (That is, we want our algorithm to be <em>unsupervised</em>.) We will look at several models that probabilistically assign words to topics using <a href="https://en.wikipedia.org/wiki/Bayes&#39;_theorem">Bayes’ Theorem</a>. They are all <a href="https://en.wikipedia.org/wiki/Bayesian_network">Bayesian Graphical Models</a>.</p>
<p>The basic problem in statistics is to infer some unobservable value from observable instances of it. In our case, we want to infer the <em>topics</em> of a document from the actual words in the document. We want to be able to infer that our document is about “colors” if we observe “red” and “green” and “blue”.</p>
<p>Bayes’ Theorem allows us to do this. It allows us to infer probabilities concerning the unobserved value from the observations that we can make. It allows us to reason backwards in some sense. So, when constructing a Bayesian model, it is helpful to <em>think</em> backwards. Instead of first asking how words are distributed to topics and topics to documents, we will ask how we could <em>generate</em> a document if we already knew these distributions. To construct our model, we will first reason from the unknown values to the known values so that we know how to do the converse when the time comes.</p>
<h1 id="some-simple-generative-examples">Some Simple Generative Examples</h1>
<p>In all of our models, we are going make a simplfying assumption. We will assume that all of the words in a document occur independently of whatever words came before or come after; that is, a document will just be a “bag of words.” We’ll see that even with ignoring word-order, we can still infer pretty accurately what a document might be about.</p>
<p>Let’s start with a very simple example: 1 document with 1 topic and 2 words in our vocabulary.</p>
<p>(Some definitions: The “vocabulary” is just the set of unique words that occur in all of the documents together, the “corpus.” We’ll refer to a word in the vocabulary as just a “word” and some instance of a word in a document as a “token.”)</p>
<p>Let’s say our two words are “blue” and “red”, and that the probability of any given word (any token) being “red” is <span class="math inline">\(\phi\)</span>: <span class="math inline">\(P(W = red) = \phi\)</span>. This is the same as saying our random variable of tokens <span class="math inline">\(W\)</span> has a Bernoulli distribution with parameter <span class="math inline">\(\phi\)</span>: <span class="math inline">\(W \sim Bernoulli(\phi)\)</span>.</p>
<p>The distribution looks like this:</p>
<pre class="ipython" data-exports="both"><code>x = [0, 1]
pmf = st.bernoulli.pmf(x, 0.3)

plt.stem(x, pmf)
plt.xticks([0,1])
plt.ylim(0,1)
plt.xlim(-0.5, 1.5)
</code></pre>
<div class="RESULTS drawer">
<pre class="example"><code>(-0.5, 1.5)
</code></pre>
</div>
<figure><img src="/images/bernoulli.png" alt="Bernoulli pmf" /></figure>

<p>Here, 1 represents “red” and 0 represents “blue” (or not-“red”).</p>
<p>And here is how we could generate a document with this model:</p>
<pre class="ipython" data-exports="both"><code>coding = {0 : &quot;blue&quot;, 1 : &quot;red&quot;}
W = 50  # number of tokens in the document
tokens = st.bernoulli.rvs(0.3, size = W)  # choose the tokens
print(&#39; &#39;.join(str(w) for w in [coding[i] for i in tokens]))
</code></pre>
<pre class="example"><code>blue blue red blue red blue blue red red blue blue blue blue blue blue blue blue red blue blue blue blue blue blue blue blue blue red red blue blue blue blue blue blue red blue blue red blue red blue red blue blue blue blue blue red blue
</code></pre>
<h2 id="unigram-model">Unigram Model</h2>
<p>For the general model, we will also choose the distribution of words within the topic randomly. That is, we will assign a probability distribution to <span class="math inline">\(\phi\)</span>.</p>
<p>The <a href="https://en.wikipedia.org/wiki/Beta_distribution">beta distribution</a> is a natural choice. Since its support is <span class="math inline">\([0,1]\)</span> it can represent randomly chosen probabilities (values between 0 and 1). It is also conceptually convenient being the <a href="https://en.wikipedia.org/wiki/Conjugate_prior">conjugate prior</a> of the Bernoulli distribution, which allows us to make a more explicit connection between its parameters and the parameters of its Bernoulli distribution.</p>
<p>The model is now:</p>
<p><span class="math inline">\(\phi \sim Beta(\beta_0, \beta_1)\)</span></p>
<p><span class="math inline">\(W \sim Bernoulli(\phi)\)</span></p>
<p>where <span class="math inline">\(\beta_0\)</span> and <span class="math inline">\(\beta_1\)</span> are the “shape parameters” of the beta distribution. We can think of them as the assumed counts of each word, or the “pseudo-counts.” Let’s see how different values of these parameters affect the shape of the distribution.</p>
<pre class="ipython" data-exports="both"><code>beta_0 = [0.8, 1, 2, 10]
beta_1 = [0.8, 1, 2, 10]

x = np.array(np.linspace(0, 1, 1000))

f, axarr = plt.subplots(len(beta_0), len(beta_1), sharex=&#39;all&#39;, sharey=&#39;none&#39;)

for i in range(len(beta_0)):
    for j in range(len(beta_1)):
        a = beta_0[i]
        b = beta_1[j]
        y = st.beta(a, b).pdf(x)
        axarr[i, j].plot(x, y)
        axarr[i, j].axes.yaxis.set_ticklabels([])
        axarr[i, j].set_title(r&#39;$\beta_0 =$ &#39; + str(a) + r&#39;, $\beta_1 =$ &#39; + str(b))

f.subplots_adjust(hspace=0.3)
f.suptitle(r&#39;Beta Distributions for $\theta$&#39;, fontsize=20)
</code></pre>
<pre class="example"><code>Text(0.5, 0.98, &#39;Beta Distributions for $\\theta$&#39;)
</code></pre>
<figure><img src="/images/beta.png" alt="a grid of six beta pdfs for various parameters" /></figure>

<p>Values near 0 will favor “blue” and values near 1 will favor “red”. We can choose <span class="math inline">\(\beta_0\)</span> and <span class="math inline">\(\beta_1\)</span> to generate the kinds of documents we like. (The notation is a bit backwards here: <span class="math inline">\(\beta_0\)</span> is the <em>pseudo-count</em> for “red”, whose probability is toward 1, on the right of the graph. So <span class="math inline">\(\beta_0 &gt; \beta_1\)</span> means more “red”s, and vice versa.)</p>
<p>Let’s generate some documents with this expanded model. We’ll set <span class="math inline">\(\beta_0 = 0.8\)</span> and <span class="math inline">\(\beta_1 = 0.8\)</span>. We would expect most of our documents to favor one word or the other, but overall to occur equally often.</p>
<pre class="ipython" data-exports="both"><code>beta_0 = 0.8
beta_1 = 0.8

thetas = st.beta.rvs(beta_0, beta_1, size = 6)

W = 10  # number of tokens in each document

for t in thetas:
    print(&#39;Theta: &#39;, t)
    tokens = st.bernoulli.rvs(t, size = W)
    print(&#39;Document: &#39; + &#39; &#39;.join(str(w) for w in [coding[i] for i in tokens]) + &#39;\n&#39;)
</code></pre>
<pre class="example"><code>Theta:  0.2376299911870814
Document: blue red blue blue red red blue blue blue blue

Theta:  0.768902025579346
Document: red red red red blue red red red blue red

Theta:  0.6339386112711662
Document: red blue red blue red blue blue blue red blue

Theta:  0.889248394241369
Document: red red red blue red red red red red red

Theta:  0.7522981849896823
Document: red red red red blue blue red red red red

Theta:  0.18416659985533126
Document: blue red red blue blue blue red red blue blue
</code></pre>
<p>(We could also assign a distribution to W, the number of tokens in each document. (Blei 2003) uses a Poisson distribution.)</p>
<p>Let’s look at a couple more.</p>
<h2 id="mixture-of-unigrams">Mixture of Unigrams</h2>
<p>Here, we’ll also choose a single topic for each document, from among two. To simplify things, we’ll also assume the topics generate distinct words and that the proportions of words in topics are similar, that is, that they have the same shape parameters. We’ll see later that is a good assumption when using inference models.</p>
<p>Distribution of topics to documents: <span class="math inline">\(\theta \sim Beta(\alpha_0, \alpha_1)\)</span></p>
<p>Distribution of words to Topic 0: <span class="math inline">\(\phi_0 \sim Beta(\beta_0, \beta_1)\)</span></p>
<p>Distribution of words to Topic 1: <span class="math inline">\(\phi_1 \sim Beta(\beta_0, \beta_1)\)</span></p>
<p>The topics: <span class="math inline">\(T \sim Bernoulli(\theta)\)</span></p>
<p>Words from Topic 0: <span class="math inline">\(W_1 \sim Bernoulli(\phi_0)\)</span></p>
<p>Words from Topic 1: <span class="math inline">\(W_2 \sim Bernoulli(\phi_1)\)</span></p>
<pre class="ipython" data-exports="both"><code>coding_0 = {0:&#39;blue&#39;, 1:&#39;red&#39;}  # words in topic 0
coding_1 = {0:&#39;dogs&#39;, 1:&#39;cats&#39;}  # words in topic 1

D = 15  # number of documents in corpus
W = 10  # number of tokens in each document

alpha_0, alpha_1 = 1, 1.5
beta_0, beta_1 = 0.8, 0.8

theta = st.beta.rvs(alpha_0, alpha_1, size = 1)[0]  # choose a distribution of topics to documents
phi_0 = st.beta.rvs(beta_0, beta_1, size = 1)[0] # choose distribution of words in topic 0
phi_1 = st.beta.rvs(beta_0, beta_1, size = 1)[0] # choose distribution of words in topic 1

topics = st.bernoulli.rvs(theta, size = D)  # choose a topic for each document

print(&#39;Theta: {:.3f}  Phi_0: {:.3f}  Phi_1: {:.3f}&#39;.format(theta, phi_0, phi_1))
for i in range(D):
    if topics[i] == 0:
        tokens = st.bernoulli.rvs(phi_0, size = W)
        print(&#39;Document: &#39; + &#39; &#39;.join(str(w) 
              for w in [coding_0[i] for i in tokens]))
    else:
        tokens = st.bernoulli.rvs(phi_1, size = W)
        print(&#39;Document: &#39; + &#39; &#39;.join(str(w) 
              for w in [coding_1[i] for i in tokens]))
</code></pre>
<pre class="example"><code>Theta: 0.114  Phi_0: 0.973  Phi_1: 0.637
Document: red red red red red red red red red red
Document: red red red blue red red red red red red
Document: red red red red red red red red red red
Document: red red red red red red red red red red
Document: red red red red red red red red red red
Document: red red red red red red red red red red
Document: red red red red red red red red red red
Document: red red red red red red red red red red
Document: dogs dogs cats cats cats cats cats dogs cats dogs
Document: red red red red red red red red red red
Document: red red red red red red red red red red
Document: red red red red red red red red red red
Document: red red blue red red red red red red red
Document: red red red red red red red red red red
Document: red red red red red red red red red red
</code></pre>
<h2 id="latent-dirichlet-allocation">Latent Dirichlet Allocation</h2>
<p>This time, instead of choosing a single topic for each document, we’ll choose a topic for each word. This will make our model much more flexible and its behavior more realistic.</p>
<p>Distribution of topics <strong>within</strong> documents: <span class="math inline">\(\theta \sim Beta(\alpha_0, \alpha_1)\)</span></p>
<p>Distribution of words to Topic 0: <span class="math inline">\(\phi_0 \sim Beta(\beta_0, \beta_1)\)</span></p>
<p>Distribution of words to Topic 1: <span class="math inline">\(\phi_1 \sim Beta(\beta_0, \beta_1)\)</span></p>
<p>The topics: <span class="math inline">\(T \sim Bernoulli(\theta)\)</span></p>
<p>Words from Topic 0: <span class="math inline">\(W_1 \sim Bernoulli(\phi_0)\)</span></p>
<p>Words from Topic 1: <span class="math inline">\(W_2 \sim Bernoulli(\phi_1)\)</span></p>
<pre class="ipython" data-exports="both"><code>coding_0 = {0:&#39;blue&#39;, 1:&#39;red&#39;}  # words in topic 0
coding_1 = {0:&#39;dogs&#39;, 1:&#39;cats&#39;}  # words in topic 1

D = 15
W = 10  # number of tokens in each document

alpha_0, alpha_1 = 1, 1.5
beta_0, beta_1 = 0.8, 0.8

theta = st.beta.rvs(alpha_0, alpha_1, size = 1)[0]  # choose a distribution of topics to documents
phi_0 = st.beta.rvs(beta_0, beta_1, size = 1)[0]  # choose distribution of words in topic 0
phi_1 = st.beta.rvs(beta_0, beta_1, size = 1)[0]  # choose distribution of words in topic 1

print(&#39;Theta: {:.3f}  Phi_0: {:.3f}  Phi_1: {:.3f}&#39;.format(theta, phi_0, phi_1))
for i in range(D):
    print(&#39;Document: &#39;, end=&#39;&#39;)
    topics = st.bernoulli.rvs(theta, size=W)  # choose topics for each word
    for j in range(W):
        if topics[j] == 0:
            token = st.bernoulli.rvs(phi_0, size=1)[0]  # choose a word from topic 0
            print(coding_0[token], end=&#39; &#39;)
        else:
            token = st.bernoulli.rvs(phi_1, size=1)[0]  # choose a word from topic 1
            print(coding_1[token], end=&#39; &#39;)
    print() 
</code></pre>
<pre class="example"><code>Theta: 0.384  Phi_0: 0.127  Phi_1: 0.028
Document: dogs blue blue blue dogs blue dogs blue blue blue 
Document: blue dogs blue blue dogs dogs dogs dogs blue cats 
Document: blue dogs blue blue blue dogs red dogs blue blue 
Document: dogs dogs red dogs dogs blue dogs blue blue blue 
Document: blue dogs dogs blue blue dogs red dogs dogs red 
Document: dogs blue blue red dogs blue dogs blue blue blue 
Document: blue blue blue dogs blue dogs blue dogs dogs blue 
Document: dogs red dogs red dogs blue dogs dogs blue blue 
Document: dogs dogs blue dogs blue dogs blue blue blue dogs 
Document: dogs blue blue blue blue red blue blue dogs dogs 
Document: dogs dogs blue red dogs dogs blue blue blue blue 
Document: blue blue blue red dogs blue blue blue blue red 
Document: blue blue blue dogs blue dogs red dogs blue dogs 
Document: dogs blue blue dogs dogs dogs blue dogs dogs blue 
Document: dogs dogs dogs red blue dogs red dogs dogs dogs 
</code></pre>
<h1 id="the-dirichlet-distribution">The Dirichlet Distribution</h1>
<p>Before we go on, we need to generalize our model a bit to be able to handle arbitrary numbers of words and topics, instead of being limited to just two. The multivariate generalization of the Bernoulli distribution is the <a href="https://en.wikipedia.org/wiki/Categorical_distribution">categorical distribution</a>, which simply gives a probability to each of some number of categories. The generalization of the beta distribution is a little trickier. It is called the <a href="https://en.wikipedia.org/wiki/Dirichlet_distribution">Dirichlet distribution</a>. And just like samples from the beta distribution will give parameters for a Bernoulli RV, samples from the Dirichlet distribution will give parameters for the categorical RV.</p>
<p>Let’s recall the two requirements for some set of <span class="math inline">\(p\)</span>’s to be probability parameters to a categorical distribution. First, they have to sum to 1: <span class="math inline">\(p_0 + p_1 + \cdots + p_v = 1\)</span>. This means they form a <a href="https://en.wikipedia.org/wiki/Hyperplane">hyperplane</a> in <span class="math inline">\(v\)</span>-dimensional space. Second, they all have to be non-negative: <span class="math inline">\(p_i \geq 0\)</span>. This means they all lie in the first quadrant (or <a href="https://en.wikipedia.org/wiki/Orthant">orthant</a>, more precisely). The geometric object that satisfies these two requirements is a <a href="https://en.wikipedia.org/wiki/Simplex#The_standard_simplex">simplex</a>. In the case of two variables it will be a line-segment and in the case of three variables it will be a triangle.</p>
<p>As sampled from the distribution, these values will form <a href="https://en.wikipedia.org/wiki/Barycentric_coordinate_system">barycentric coordinates</a> on the simplex. This just means that the coordinates tell you how far the point is from the center of the simplex, instead of how far it is from the origin, like with Cartesian coordinates.</p>
<p>The 3-dimensional Dirichlet returns barycentric coordinates on the 2-simplex, a triangle. We can visualize the surface of the Dirichlet pdf as existing over a triangle; that is, its domain is the simplex.</p>
<pre class="ipython" data-exports="both"><code>import simplex_plots as sp
# from https://gist.github.com/tboggs/8778945

alphas = [[0.999, 0.999, 0.999], [1, 2, 1], [1, 2, 3], 
          [2, 0.999, 1], [10, 3, 4], [0.999, 1, 1]]

fig = plt.figure(figsize=(12, 8))
fig.suptitle(&#39;The Dirichlet Distribution&#39;, fontsize=16)
for i, a in enumerate(alphas):
    plt.subplot(2, len(alphas)/2, i + 1)
    sp.draw_pdf_contours(sp.Dirichlet(a), border=True, cmap=&#39;Blues&#39;)
    title = r&#39;$\alpha = $ = ({0[0]:.3f}, {0[1]:.3f}, {0[2]:.3f})&#39;.format(a)
    plt.title(title, fontdict={&#39;fontsize&#39;: 14})
</code></pre>
<figure><img src="/images/dirichlet.png" alt="various dirichlet pdfs" /></figure>

<p>Each corner of the triangle will favor a particular category (a word or a topic), just like either side of the domain of the beta distribution favored a category.</p>
<p>As in the upper left picture, whenever all of the entries in <span class="math inline">\(\alpha\)</span> are equal, we call the distribution “symmetric,” and whenever they are all less then 1, we call the distribution “sparse.” Distributions that are both symmetric and sparse are often used as priors when inferring a topic model, symmetry because we don’t <em>a priori</em> have any reason to favor one unknown category over another, and sparsity to encourage our categories to be distinct.</p>
<p>Now let’s start developing our models.</p>
<h1 id="the-full-model">The Full Model</h1>
<h2 id="data-preparation">Data Preparation</h2>
<p>First we’ll make up a corpus and put it into an encoding that our models can use. To simplify things, we’ll let all of our documents have the same number of tokens and flatten the encoded data structure.</p>
<pre class="ipython" data-exports="both"><code>from sklearn.preprocessing import LabelEncoder
from sklearn.feature_extraction.text import CountVectorizer

corpus = [
    &#39;Red blue green. Green blue blue? Red, red, blue, yellow.&#39;,
    &#39;Car light red stop. Stop car. Car drive green, yellow.&#39;,
    &#39;Car engine gas stop! Battery engine drive, car. Electric, gas.&#39;,
    &#39;Watt, volt, volt, amp. Battery, watt, volt, electric volt charge. &#39;,
]

tokenizer = CountVectorizer(lowercase=True).build_analyzer()
encoder = LabelEncoder()

corpus_tokenized = np.array([tokenizer(doc) for doc in corpus])  # assign a number to each word
encoder.fit(corpus_tokenized.ravel())
vocab = list(encoder.classes_)  # the vocabulary

# The number of documents and their length
D, W = corpus_tokenized.shape
# The number of words in the vocabulary
V = len(vocab)

# Flatten and encode the corpus, and create an index.
data = corpus_tokenized.ravel()
data = encoder.transform(data)
data_index = np.repeat(np.arange(D), W)
</code></pre>
<p>Now a couple of diagnostic functions.</p>
<pre class="ipython" data-exports="both"><code>def print_top_words(vocab, phis, n):
    &#39;&#39;&#39;Prints the top words occuring within a topic.&#39;&#39;&#39;
    for i, p in enumerate(phis):
        z = list(zip(vocab, p))
        z.sort(key = lambda x: x[1], reverse=True)
        z = z[0:n]

        for word, percent in z:
            print(f&#39;Topic: {i:2}  Word: {word:10}  Percent: {percent:0.3f}&#39;)

        print()

def print_corpus_topics(corpus_tokenized, zs):
    &#39;&#39;&#39;Prints the corpus together with the topic assigned to each word.&#39;&#39;&#39;
    for d in range(zs.shape[0]):  # the document index
        for w in range(zs.shape[1]):  # the word index
            print(f&#39;({corpus_tokenized[d, w]}, {zs[d, w]})&#39;, end=&#39; &#39;)
        print(&#39;\n&#39;)
</code></pre>
<h2 id="the-unigram-model">The Unigram Model</h2>
<p>In this model, words from every document are drawn from a single categorical distribution.</p>
<p>Distribution of words in a document: <span class="math inline">\(\phi \sim Dir(\vec{\beta})\)</span>, where <span class="math inline">\(\vec{\beta}\)</span> is a vector of shape parameters</p>
<p>Distribution of tokens: <span class="math inline">\(W \sim Cat(\vec{\phi})\)</span></p>
<p><a href="https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo">Markov-Chain Monte Carlo</a> is a technique for sampling a model to discover its posterior parameters statistically. When models become complex, it is often the case that analytic solutions for the parameters are intractable. We will use the <a href="https://docs.pymc.io/">PyMC3</a> package.</p>
<p>First we describe the model.</p>
<pre class="ipython" data-exports="both"><code># Pseudo-counts for each vocab word occuring in the documents.
beta = np.ones(V)

with pm.Model() as unigram_model:

    # Distribution of word-types in the corpus.
    phi = pm.Dirichlet(&#39;phi&#39;, a = beta)

    # The distribution of words.
    w = pm.Categorical(&#39;w&#39;, p = phi, observed = data)
</code></pre>
<p>Next we sample the model to create the posterior distribution.</p>
<pre class="ipython" data-exports="both"><code>with unigram_model:
    draw = 5000
    unigram_trace = pm.sample(5000, tune=1000, chains=4, progressbar=False)
</code></pre>
<p>And now we can see what the model determined the proportion of each word in the corpus was.</p>
<pre class="ipython" data-exports="both"><code>print_top_words(vocab, [unigram_trace.get_values(&#39;phi&#39;)[draw-1]], len(vocab))
</code></pre>
<pre class="example"><code>Topic:  0  Word: red         Percent: 0.150
Topic:  0  Word: watt        Percent: 0.145
Topic:  0  Word: car         Percent: 0.117
Topic:  0  Word: green       Percent: 0.080
Topic:  0  Word: battery     Percent: 0.073
Topic:  0  Word: volt        Percent: 0.068
Topic:  0  Word: yellow      Percent: 0.067
Topic:  0  Word: drive       Percent: 0.059
Topic:  0  Word: electric    Percent: 0.054
Topic:  0  Word: gas         Percent: 0.053
Topic:  0  Word: stop        Percent: 0.048
Topic:  0  Word: blue        Percent: 0.030
Topic:  0  Word: engine      Percent: 0.025
Topic:  0  Word: charge      Percent: 0.021
Topic:  0  Word: light       Percent: 0.011
Topic:  0  Word: amp         Percent: 0.002
</code></pre>
<h2 id="mixture-of-unigrams-naive-bayes">Mixture of Unigrams (Naive Bayes)</h2>
<p>In this model, each document is assigned a topic and each topic has its own distribution of words.</p>
<p>Distribution of topics to documents: <span class="math inline">\(\vec{\theta} \sim Dirichlet(\vec{\alpha})\)</span></p>
<p>Distribution of words to topics: <span class="math inline">\(\vec{\phi} \sim Dirichlet(\vec{\beta})\)</span></p>
<p>The topics: <span class="math inline">\(T \sim Categorical(\vec{\theta})\)</span></p>
<p>The tokens: <span class="math inline">\(W \sim Categorical(\vec{\phi})\)</span></p>
<pre class="ipython" data-exports="both"><code># Number of topics    
K = 3

# Pseudo-counts for topics and words.
alpha = np.ones(K)*0.8
beta = np.ones(V)*0.8

with pm.Model() as naive_model:
    # Global topic distribution
    theta = pm.Dirichlet(&quot;theta&quot;, a=alpha)

    # Word distributions for K topics
    phi = pm.Dirichlet(&quot;phi&quot;, a=beta, shape=(K, V))

    # Topic of documents
    z = pm.Categorical(&quot;z&quot;, p=theta, shape=D)

    # Words in documents
    p = phi[z][data_index]
    w = pm.Categorical(&quot;w&quot;, p=p, observed=data)
</code></pre>
<pre class="ipython" data-exports="both"><code>with naive_model:
    draw = 5000
    naive_trace = pm.sample(draw, tune=1000, chains=4, progressbar=False)
</code></pre>
<pre class="ipython" data-exports="both"><code>print_top_words(vocab, naive_trace[&#39;phi&#39;][draw-1], 5)
</code></pre>
<pre class="example"><code>Topic:  0  Word: drive       Percent: 0.177
Topic:  0  Word: car         Percent: 0.166
Topic:  0  Word: red         Percent: 0.126
Topic:  0  Word: blue        Percent: 0.108
Topic:  0  Word: green       Percent: 0.086

Topic:  1  Word: car         Percent: 0.238
Topic:  1  Word: green       Percent: 0.192
Topic:  1  Word: watt        Percent: 0.180
Topic:  1  Word: blue        Percent: 0.070
Topic:  1  Word: red         Percent: 0.045

Topic:  2  Word: volt        Percent: 0.161
Topic:  2  Word: car         Percent: 0.123
Topic:  2  Word: engine      Percent: 0.113
Topic:  2  Word: electric    Percent: 0.094
Topic:  2  Word: gas         Percent: 0.081
</code></pre>
<h2 id="latent-dirichlet-allocation-1">Latent Dirichlet Allocation</h2>
<p>In this model, each word is assigned a topic and topics are distributed varyingly within each document.</p>
<p>Distribution of topics within documents: <span class="math inline">\(\vec{\theta} \sim Dirichlet(\vec{\alpha})\)</span></p>
<p>Distribution of words to topics: <span class="math inline">\(\vec{\phi} \sim Dirichlet(\vec{\beta})\)</span></p>
<p>The topics: <span class="math inline">\(T \sim Categorical(\vec{\theta})\)</span></p>
<p>The tokens: <span class="math inline">\(W \sim Categorical(\vec{\phi})\)</span></p>
<pre class="ipython" data-exports="both"><code># Number of topics    
K = 3

# Pseudo-counts. Sparse to encourage separation.
alpha = np.ones((1, K))*0.5
beta = np.ones((1, V))*0.5

with pm.Model() as lda_model:
    # Distribution of topics within each document
    theta = pm.Dirichlet(&quot;theta&quot;, a=alpha, shape=(D, K))

    # Distribution of words within each topic
    phi = pm.Dirichlet(&quot;phi&quot;, a=beta, shape=(K, V))

    # The topic for each word
    z = pm.Categorical(&quot;z&quot;, p=theta, shape=(W, D))

    # Words in documents
    p = phi[z].reshape((D*W, V))
    w = pm.Categorical(&quot;w&quot;, p=p, observed=data)
</code></pre>
<pre class="ipython" data-exports="both"><code>with lda_model:
    draw = 5000
    lda_trace = pm.sample(draw, tune=1000, chains=4, progressbar=False)

print_top_words(tokens, lda_trace.get_values(&#39;phi&#39;)[draw-1], 4)
</code></pre>
<p>At the cost of some complexity, we can rewrite our model to handle a corpus with documents of varying lengths.</p>
<pre class="ipython" data-exports="both"><code>alpha = np.ones([D, K])*0.5  # prior weights for the topics in each document (pseudo-counts)
beta  = np.ones([K, V])*0.5  # prior weights for the vocab words in each topic (pseudo-counts)

sequence_data = np.reshape(np.array(data), (D,W))
N = np.repeat(W, D)  # this model needs a list of document lengths

with pm.Model() as sequence_model:

    # distribution of the topics occuring in a particular document
    theta   = pm.Dirichlet(&#39;theta&#39;, a=alpha, shape=(D, K))

    # distribution of the vocab words occuring in a particular topic
    phi     = pm.Dirichlet(&#39;phi&#39;, a=beta, shape=(K, V))

    # the topic for a particular word in a particular document: shape = (D, N[d])
    # theta[d] is the vector of category probabilities for each topic in 
    # document d.
    z = [pm.Categorical(&#39;z_{}&#39;.format(d), p = theta[d], shape=N[d])
          for d in range(D)]

    # the word occuring at position n, in a particular document d: shape = (D, N[d]) 
    # z[d] is the vector of topics for document d
    # z[d][n] is the topic for word n in document d
    # phi[z[d][n]] is the distribution of words for topic z[d][n]
    # [d][n] is the n-th word observed in document d
    w = [pm.Categorical(&#39;w_{}_{}&#39;.format(d, n), p=phi[z[d][n]],
                        observed = sequence_data[d][n])
         for d in range(D) for n in range(N[d])]

with sequence_model:
    draw = 5000
    sequence_trace = pm.sample(draw, tune=1000, chains=4, progressbar=False)

print_top_words(tokens, sequence_trace.get_values(&#39;phi&#39;)[4999], 4)
</code></pre>
<p>And here we can see what topic the model assigned to each token in the corpus.</p>
<pre class="ipython" data-exports="both"><code>zs = [sequence_trace.get_values(&#39;z_{}&#39;.format(d))[draw-1] for d in range(D)]
zs = np.array(zs)

print_corpus_topics(corpus_tokenized, zs)
</code></pre>
<pre class="example"><code>(red, 2) (blue, 0) (green, 0) (green, 0) (blue, 0) (blue, 0) (red, 2) (red, 0) (blue, 0) (yellow, 0) 

(car, 1) (light, 2) (red, 1) (stop, 1) (stop, 1) (car, 1) (car, 1) (drive, 1) (green, 2) (yellow, 1) 

(car, 1) (engine, 1) (gas, 1) (stop, 1) (battery, 1) (engine, 1) (drive, 1) (car, 0) (electric, 1) (gas, 1) 

(watt, 0) (volt, 0) (volt, 0) (amp, 1) (battery, 1) (watt, 0) (volt, 0) (electric, 0) (volt, 0) (charge, 0) 

</code></pre>
<p>Since we chose to distribute words among three topics, we can examine the distributions of these topics to each document on a simplex. Below, each triangle represents a document and each corner represents a topic. Whenever the sampled points cluster at a corner, that means our model decided that that document was predominantly about the corresponding topic.</p>
<pre class="ipython" data-exports="both"><code>with sequence_model:
    pps = pm.sample_posterior_predictive(sequence_trace, vars=[theta], samples=1000, progressbar=False)

var = pps[&#39;theta&#39;]
thetas = sequence_trace[&#39;theta&#39;][4999]
nthetas = thetas.shape[0]

blue = sns.color_palette(&#39;Blues_r&#39;)[0]
fig = plt.figure()
fig.suptitle(&#39;Distribution of Topics to Documents&#39;, fontsize=16)
for i, ts in enumerate(thetas):
    plt.subplot(2, nthetas/2, i + 1)
    sp.plot_points(var[:,i], color=blue, marker=&#39;o&#39;, alpha=0.1, markersize=3)
    title = r&#39;$\theta_{0}$ = ({1[0]:.3f}, {1[1]:.3f}, {1[2]:.3f})&#39;.format(i,ts)
    plt.title(title, fontdict={&#39;fontsize&#39;: 14})
</code></pre>
<figure><img src="/images/distribution.png" alt="random sample of documents in the dirichlet model"/></figure>

<p>That’s all for now!</p>
<h1 id="references">References</h1>
<p>Blei, David M, Andrew Y Ng and Michael I Jordan. 2003. “Latent dirichlet allocation.” Journal of machine Learning research.</p>
<p><a href="https://stackoverflow.com/questions/31473459/pymc3-how-to-implement-latent-dirichlet-allocation" class="uri">https://stackoverflow.com/questions/31473459/pymc3-how-to-implement-latent-dirichlet-allocation</a></p>
<p><a href="https://github.com/junpenglao/Planet_Sakaar_Data_Science/blob/master/PyMC3QnA/discourse_2314.ipynb" class="uri">https://github.com/junpenglao/Planet_Sakaar_Data_Science/blob/master/PyMC3QnA/discourse_2314.ipynb</a></p>]]></description>
    <pubDate>Wed, 30 Jan 2019 00:00:00 UT</pubDate>
    <guid>https://mathformachines.com/posts/bayesian-topic-modeling/index.html</guid>
    <dc:creator>Ryan Holbrook</dc:creator>
</item>
<item>
    <title>Visualizing the Loss Landscape of a Neural Network</title>
    <link>https://mathformachines.com/posts/visualizing-the-loss-landscape/index.html</link>
    <description><![CDATA[<p>Training a neural network is an optimization problem, the problem of minimizing its <em>loss</em>. The <strong>loss function</strong> <span class="math inline">\(Loss_X(w)\)</span> of a neural network is the error of its predictions over a fixed dataset <span class="math inline">\(X\)</span> as a function of the network’s weights or other parameters <span class="math inline">\(w\)</span>. The <strong>loss landscape</strong> is the graph of this function, a surface in some usually high-dimensional space. We can imagine the training of the network as a journey across this surface: Weight initialization drops us onto some random coordinates in the landscape, and then SGD guides us step-by-step along a path of parameter values towards a minimum. The success of our training depends on the shape of the landscape and also on our manner of stepping across it.</p>
<p>As a neural network typically has many parameters (hundreds or millions or more), this loss surface will live in a space too large to visualize. There are, however, some tricks we can use to get a good two-dimensional of it and so gain a valuable source of intuition. I learned about these from <em>Visualizing the Loss Landscape of Neural Nets</em> by Li, et al. (<a href="https://arxiv.org/abs/1712.09913">arXiv</a>).</p>
<figure>
<video autoplay loop mutued playsinline controls>
  <source src="/images/loss-landscape-path.webm" type="video/webm">
  <source src="/images/loss-landscape-path.mp4" type="video/mp4">
  Can't play the video for some reason! Click <a href="/images/loss-landscape-path.gif">here</a> to download a gif.
</video>
</figure>

<h1 id="the-linear-case">The Linear Case</h1>
<p>Let’s start with the two-dimensional case to get an idea of what we’re looking for.</p>
<p>A single neuron with one input computes <span class="math inline">\(y = w x + b\)</span> and so has only two parameters: a weight <span class="math inline">\(w\)</span> for the input <span class="math inline">\(x\)</span> and a bias <span class="math inline">\(b\)</span>. Having only two parameters means we can view every dimension of the loss surface with a simple contour plot, the bias along one axis and the single weight along the other:</p>
<figure>
<video autoplay loop mutued playsinline controls>
  <source src="/images/loss-landscape-linear.webm" type="video/webm">
  <source src="/images/loss-landscape-linear.mp4" type="video/mp4">
  Can't play the video for some reason! Click <a href="/images/loss-landscape-linear.gif">here</a> to download a gif.
</video>
<figcaption>Traversing the loss landscape of a linear model with SGD.</figcaption>
</figure>

<p>After training this simple linear model, we’ll have a pair of weights <span class="math inline">\(w^*\)</span> and <span class="math inline">\(b^*\)</span> that should be approximately where the minimal loss occurs – it’s nice to take this point as the center of the plot. By collecting the weights at every step of training, we can trace out the path taken by SGD across the loss surface towards the minimum.</p>
<p>Our goal now is to get similar kinds of images for networks with any number of parameters.</p>
<h1 id="making-random-slices">Making Random Slices</h1>
<p>How can we view the loss landscape of a larger network? Though we can’t anything like a complete view of the loss surface, we can still get <em>a</em> view as long as we don’t especially care <em>what</em> view we get; that is, we’ll just take a random 2D slice out of the loss surface and look at the contours that slice, hoping that it’s more or less representative.</p>
<p>This slice is basically a coordinate system: we need a center (the origin) and a pair of direction vectors (axes). As before, let’s take the weights <span class="math inline">\(W^*\)</span> from the trainined network to act as the center, and the direction vectors we’ll generate randomly.</p>
<p>Now the loss at some point <span class="math inline">\((a, b)\)</span> on the graph is taken by setting the weights of the network to <span class="math inline">\(W^* + a W_0 + b W_1\)</span> and evaluating it on the given data. Plot these losses across some range of values for <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span>, and we can produce our contour plot.</p>
<figure>
<img src="/images/random-loss-surface.png" title="random-loss-surface" alt="Random slices through a high-dimensional loss surface" /><figcaption>Random slices through a high-dimensional loss surface</figcaption>
</figure>
<p>We might worry that the plot would be distorted if the random vectors we chose happened to be close together, even though we’ve plotted them as if they were at a right angle. It’s a nice fact about high-dimensional vector spaces, though, that any two random vectors you choose from them will usually be close to orthogonal.</p>
<p>Here’s how we could implement this:</p>
<pre class="python"><code>import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import callbacks, layers

class RandomCoordinates(object):
    def __init__(self, origin):
        self.origin_ = origin
        self.v0_ = normalize_weights(
            [np.random.normal(size=w.shape) for w in origin], origin
        )
        self.v1_ = normalize_weights(
            [np.random.normal(size=w.shape) for w in origin], origin
        )

    def __call__(self, a, b):
        return [
            a * w0 + b * w1 + wc
            for w0, w1, wc in zip(self.v0_, self.v1_, self.origin_)
        ]


def normalize_weights(weights, origin):
    return [
        w * np.linalg.norm(wc) / np.linalg.norm(w)
        for w, wc in zip(weights, origin)
    ]


class LossSurface(object):
    def __init__(self, model, inputs, outputs):
        self.model_ = model
        self.inputs_ = inputs
        self.outputs_ = outputs

    def compile(self, range, points, coords):
        a_grid = tf.linspace(-1.0, 1.0, num=points) ** 3 * range
        b_grid = tf.linspace(-1.0, 1.0, num=points) ** 3 * range
        loss_grid = np.empty([len(a_grid), len(b_grid)])
        for i, a in enumerate(a_grid):
            for j, b in enumerate(b_grid):
                self.model_.set_weights(coords(a, b))
                loss = self.model_.test_on_batch(
                    self.inputs_, self.outputs_, return_dict=True
                )[&quot;loss&quot;]
                loss_grid[j, i] = loss
        self.model_.set_weights(coords.origin_)
        self.a_grid_ = a_grid
        self.b_grid_ = b_grid
        self.loss_grid_ = loss_grid

    def plot(self, range=1.0, points=24, levels=20, ax=None, **kwargs):
        xs = self.a_grid_
        ys = self.b_grid_
        zs = self.loss_grid_
        if ax is None:
            _, ax = plt.subplots(**kwargs)
            ax.set_title(&quot;The Loss Surface&quot;)
            ax.set_aspect(&quot;equal&quot;)
        # Set Levels
        min_loss = zs.min()
        max_loss = zs.max()
        levels = tf.exp(
            tf.linspace(
                tf.math.log(min_loss), tf.math.log(max_loss), num=levels
            )
        )
        # Create Contour Plot
        CS = ax.contour(
            xs,
            ys,
            zs,
            levels=levels,
            cmap=&quot;magma&quot;,
            linewidths=0.75,
            norm=mpl.colors.LogNorm(vmin=min_loss, vmax=max_loss * 2.0),
        )
        ax.clabel(CS, inline=True, fontsize=8, fmt=&quot;%1.2f&quot;)
        return ax
</code></pre>
<p>Let’s try it out. We’ll create a simple fully-connected network to fit a curve to this parabola:</p>
<pre class="python"><code># Create some data
NUM_EXAMPLES = 256
BATCH_SIZE = 64
x = tf.random.normal(shape=(NUM_EXAMPLES, 1))
err = tf.random.normal(shape=x.shape, stddev=0.25)
y = x ** 2 + err
y = tf.squeeze(y)
ds = (tf.data.Dataset
      .from_tensor_slices((x, y))
      .shuffle(NUM_EXAMPLES)
      .batch(BATCH_SIZE))
plt.plot(x, y, &#39;o&#39;, alpha=0.5);
</code></pre>
<p><img src="/images/loss-surface-parabola.png" /></p>
<pre class="python"><code># Fit a fully-connected network (ie, a multi-layer perceptron)
model = keras.Sequential([
  layers.Dense(64, activation=&#39;relu&#39;),
  layers.Dense(64, activation=&#39;relu&#39;),
  layers.Dense(64, activation=&#39;relu&#39;),
  layers.Dense(1)
])
model.compile(
  loss=&#39;mse&#39;,
  optimizer=&#39;adam&#39;,
)
history = model.fit(
  ds,
  epochs=200,
  verbose=0,
)

# Look at fitted curve
grid = tf.linspace(-4, 4, 3000)
fig, ax = plt.subplots()
ax.plot(x, y, &#39;o&#39;, alpha=0.1)
ax.plot(grid, model.predict(grid).reshape(-1, 1), color=&#39;k&#39;)
</code></pre>
<p><img src="/images/loss-surface-parabola-fit.png" /></p>
<p>Looks like we got an okay fit, so now we’ll look at a random slice from the loss surface:</p>
<pre class="python"><code># Create loss surface
coords = RandomCoordinates(model.get_weights())
loss_surface = LossSurface(model, x, y)
loss_surface.compile(points=30, coords=coords)

# Look at loss surface
plt.figure(dpi=100)
loss_surface.plot()
</code></pre>
<p><img src="/images/loss-surface-random-slice-result.png" /></p>
<h1 id="improving-the-view">Improving the View</h1>
<p>Getting a good plot of the path the parameters take during training requires one more trick. A path through a random slice of the landscape tends to show too little variation to get a good idea of how the training actually proceeded. A more representative view would show us the directions through which the parameters had the <em>most</em> variation. We want, in other words, the first two principal components of the collection of parameters assumed by the network during training.</p>
<pre class="python"><code>from sklearn.decomposition import PCA

# Some utility functions to reshape network weights
def vectorize_weights_(weights):
    vec = [w.flatten() for w in weights]
    vec = np.hstack(vec)
    return vec


def vectorize_weight_list_(weight_list):
    vec_list = []
    for weights in weight_list:
        vec_list.append(vectorize_weights_(weights))
    weight_matrix = np.column_stack(vec_list)
    return weight_matrix


def shape_weight_matrix_like_(weight_matrix, example):
    weight_vecs = np.hsplit(weight_matrix, weight_matrix.shape[1])
    sizes = [v.size for v in example]
    shapes = [v.shape for v in example]
    weight_list = []
    for net_weights in weight_vecs:
        vs = np.split(net_weights, np.cumsum(sizes))[:-1]
        vs = [v.reshape(s) for v, s in zip(vs, shapes)]
        weight_list.append(vs)
    return weight_list


def get_path_components_(training_path, n_components=2):
    # Vectorize network weights
    weight_matrix = vectorize_weight_list_(training_path)
    # Create components
    pca = PCA(n_components=2, whiten=True)
    components = pca.fit_transform(weight_matrix)
    # Reshape to fit network
    example = training_path[0]
    weight_list = shape_weight_matrix_like_(components, example)
    return pca, weight_list


class PCACoordinates(object):
    def __init__(self, training_path):
        origin = training_path[-1]
        self.pca_, self.components = get_path_components_(training_path)
        self.set_origin(origin)

    def __call__(self, a, b):
        return [
            a * w0 + b * w1 + wc
            for w0, w1, wc in zip(self.v0_, self.v1_, self.origin_)
        ]

    def set_origin(self, origin, renorm=True):
        self.origin_ = origin
        if renorm:
            self.v0_ = normalize_weights(self.components[0], origin)
            self.v1_ = normalize_weights(self.components[1], origin)
</code></pre>
<p>Having defined these, we’ll train a model like before but this time with a simple callback that will collect the weights of the model while it trains:</p>
<pre class="python"><code># Create data
ds = (
    tf.data.Dataset.from_tensor_slices((inputs, outputs))
    .repeat()
    .shuffle(1000, seed=SEED)
    .batch(BATCH_SIZE)
)


# Define Model
model = keras.Sequential(
    [
        layers.Dense(64, activation=&quot;relu&quot;, input_shape=[1]),
        layers.Dense(64, activation=&quot;relu&quot;),
        layers.Dense(64, activation=&quot;relu&quot;),      
        layers.Dense(1),
    ]
)

model.compile(
    optimizer=&quot;adam&quot;, loss=&quot;mse&quot;,
)

training_path = [model.get_weights()]
# Callback to collect weights as the model trains
collect_weights = callbacks.LambdaCallback(
    on_epoch_end=(
        lambda batch, logs: training_path.append(model.get_weights())
    )
)

history = model.fit(
    ds,
    steps_per_epoch=1,
    epochs=40,
    callbacks=[collect_weights],
    verbose=0,
)
</code></pre>
<p>And now we can get a view of the loss surface more representative of where the optimization actually occurs:</p>
<pre class="python"><code># Create loss surface
coords = PCACoordinates(training_path)
loss_surface = LossSurface(model, x, y)
loss_surface.compile(points=30, coords=coords, range=0.2)
# Look at loss surface
loss_surface.plot(dpi=150)
</code></pre>
<p><img src="/images/loss-surface-pca-slice-result.png" /></p>
<h1 id="plotting-the-optimization-path">Plotting the Optimization Path</h1>
<p>All we’re missing now is the path the neural network weights took during training in terms of the transformed coordinate system. Given the weights <span class="math inline">\(w\)</span> for a neural network, in other words, we need to find the values of <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span> that correspond to the direction vectors we found via PCA and the origin weights <span class="math inline">\(w_c\)</span>.</p>
<p><span class="math display">\[w - v_c = a v_0 + b v_1\]</span></p>
<p>We can’t solve this using an ordinary inverse (the matrix <span class="math inline">\( \left[\begin{matrix} v_0 &amp; v_1 \end{matrix} \right] \)</span> isn’t square), so instead we’ll use the Moore-Penrose pseudoinverse, which will give us a least-squares optimal projection of <span class="math inline">\(w\)</span> onto the coordinate vectors:</p>
<p><span class="math display">\[\left[\begin{matrix} v_0 &amp; v_1 \end{matrix}\right]^+ (w - v_c) = (a, b)\]</span></p>
<p>This is the ordinary least squares solution to the equation above.</p>
<pre class="python"><code>def weights_to_coordinates(coords, training_path):
    &quot;&quot;&quot;Project the training path onto the first two principal components
using the pseudoinverse.&quot;&quot;&quot;
    components = [coords.v0_, coords.v1_]
    comp_matrix = vectorize_weight_list_(components)
    # the pseudoinverse
    comp_matrix_i = np.linalg.pinv(comp_matrix)
    # the origin vector
    w_c = vectorize_weights_(training_path[-1])
    # center the weights on the training path and project onto components
    coord_path = np.array(
        [
            comp_matrix_i @ (vectorize_weights_(weights) - w_c)
            for weights in training_path
        ]
    )
    return coord_path


def plot_training_path(coords, training_path, ax=None, end=None, **kwargs):
    path = weights_to_coordinates(coords, training_path)
    if ax is None:
        fig, ax = plt.subplots(**kwargs)
    colors = range(path.shape[0])
    end = path.shape[0] if end is None else end
    norm = plt.Normalize(0, end)
    ax.scatter(
        path[:, 0], path[:, 1], s=4, c=colors, cmap=&quot;cividis&quot;, norm=norm,
    )
    return ax
</code></pre>
<p>Applying these to the training path we saved means we can plot them along with the loss landscape in the PCA coordinates:</p>
<pre class="python"><code>pcoords = PCACoordinates(training_path)
loss_surface = LossSurface(model, x, y)
loss_surface.compile(points=30, coords=pcoords, range=0.4)
ax = loss_surface.plot(dpi=150)
plot_training_path(pcoords, training_path, ax)
</code></pre>
<p><img src="/images/loss-surface-pca-path-result.png" /></p>]]></description>
    <pubDate>Sat, 26 Sep 2020 00:00:00 UT</pubDate>
    <guid>https://mathformachines.com/posts/visualizing-the-loss-landscape/index.html</guid>
    <dc:creator>Ryan Holbrook</dc:creator>
</item>

    </channel>
</rss>
